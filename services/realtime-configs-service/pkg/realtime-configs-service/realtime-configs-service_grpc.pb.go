// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/realtime-configs-service/realtime-configs-service.proto

package realtime_configs_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RealtimeConfigsService_GetValue_FullMethodName = "/realtime_configs_service.RealtimeConfigsService/GetValue"
	RealtimeConfigsService_SetValue_FullMethodName = "/realtime_configs_service.RealtimeConfigsService/SetValue"
)

// RealtimeConfigsServiceClient is the client API for RealtimeConfigsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealtimeConfigsServiceClient interface {
	GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error)
	SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*SetValueResponse, error)
}

type realtimeConfigsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRealtimeConfigsServiceClient(cc grpc.ClientConnInterface) RealtimeConfigsServiceClient {
	return &realtimeConfigsServiceClient{cc}
}

func (c *realtimeConfigsServiceClient) GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error) {
	out := new(GetValueResponse)
	err := c.cc.Invoke(ctx, RealtimeConfigsService_GetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeConfigsServiceClient) SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*SetValueResponse, error) {
	out := new(SetValueResponse)
	err := c.cc.Invoke(ctx, RealtimeConfigsService_SetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealtimeConfigsServiceServer is the server API for RealtimeConfigsService service.
// All implementations must embed UnimplementedRealtimeConfigsServiceServer
// for forward compatibility
type RealtimeConfigsServiceServer interface {
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
	mustEmbedUnimplementedRealtimeConfigsServiceServer()
}

// UnimplementedRealtimeConfigsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRealtimeConfigsServiceServer struct {
}

func (UnimplementedRealtimeConfigsServiceServer) GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedRealtimeConfigsServiceServer) SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedRealtimeConfigsServiceServer) mustEmbedUnimplementedRealtimeConfigsServiceServer() {
}

// UnsafeRealtimeConfigsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealtimeConfigsServiceServer will
// result in compilation errors.
type UnsafeRealtimeConfigsServiceServer interface {
	mustEmbedUnimplementedRealtimeConfigsServiceServer()
}

func RegisterRealtimeConfigsServiceServer(s grpc.ServiceRegistrar, srv RealtimeConfigsServiceServer) {
	s.RegisterService(&RealtimeConfigsService_ServiceDesc, srv)
}

func _RealtimeConfigsService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeConfigsServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeConfigsService_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeConfigsServiceServer).GetValue(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeConfigsService_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeConfigsServiceServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeConfigsService_SetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeConfigsServiceServer).SetValue(ctx, req.(*SetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RealtimeConfigsService_ServiceDesc is the grpc.ServiceDesc for RealtimeConfigsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealtimeConfigsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realtime_configs_service.RealtimeConfigsService",
	HandlerType: (*RealtimeConfigsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _RealtimeConfigsService_GetValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _RealtimeConfigsService_SetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/realtime-configs-service/realtime-configs-service.proto",
}
